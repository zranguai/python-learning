# 1.匹配整数或者小数
# \d+(\.\d+)?
# 2.匹配年月日日期 格式2018-12-6
# ^(\d{4}-(([1][0-2])|[1-9])-(([1-2]\d)|(3[01])|[1-9]))$
# 改进： ([1-3]\d)-->([1-2]\d)|(3[01])
# 3.匹配qq号
# 规则：第一：QQ号必须是数字组成，第二：第一个数字不为0且是一位数，取值范围1-9，第三，QQ号位数至少是五位数。
# [1-9]\d{4,9}
# 4.11位的电话号码
# [1][34578]\d{9}
# 5.长度为8-10位的用户密码：包括数字字母下划线
# \w{8,10}
# 6.匹配验证码：4位数字字母组成的
# [\da-zA-Z]{4}
# 7.匹配邮箱地址
# [\w-]+[@][\w-]+(\.[\w-]+)+
# ######下面借助re模块
import re
# 8.从类似
# <a>wahaha</a>
# <b>banana</b>
# <h1>qqxing</h1>
# 这样的字符串中，
s1 = """
<a>wahaha</a>
<b>banana</b>
<h1>qqxing</h1>
"""
# 1）匹配出wahaha，banana，qqxing内容
# ret = re.findall("<\w+>(.*?)</\w+>", s1)
# print(ret)
# 2）匹配出a,b,h1这样的内容
# ret = re.findall("<(\w+)>.*?</\w+>", s1)
# print(ret)
# 9.1-2*((60-30+(-40/5)(9-25/3+7/399/42998+10568))-(-4*3)/(16-3*2))
# 1)从上面算式中匹配出最内层小括号以及小括号内的表达式  ???用正则表达式做
s2 = """
1-2*((60-30+(-40/5)+(9-25/3+7/399/42998+10568))-(-4*3)/(16-3*2))
"""
# \([^()]+\)
# 10.从类似9-25/3+7/399/42998+10568/14的表达式中匹配出从左到右第一个乘法或除法
s3 = """
9-25/3+7/399/42998+10568/14
"""
# \d+(\.\d+)?[/*]-?\d+(\.\d+)?
