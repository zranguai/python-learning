# 什么是正则表达式
#     一套规则-匹配字符串
#
# 能做什么(常见的两个场景)
#     1.检测一个输入的字符串是否合法  --web开发项目 表单验证
#         用户输入一个内容的时候，我们要提前做检测
#         能够提高程序的效率并且减轻服务器的压力
#     2.从一个大文件中找到所有符合规则的内容
#         能够高效的从一大段文字中找到符合规则的内容 -- 日志分析/爬虫


# 正则规则
# 字符组  []  [^]
# 描述的是一个位置上能出现的所有可能性
# 接受范围，可以描述多个范围，连着写就可以了
#     [abc]一个中括号只表示一个字符位置
#     匹配a或者b或者c
#     [0-9] 根据ascil进行范围匹配
#     [a-z] 小写字母
#     [A-Z] 大写字母
#
#     [a-zA-Z] 大小写字母
#     [0-9a-z] 数字小写
#     [0-9a-zA-Z] 数字小写大写字母

# 在正则表达式中能够帮助我们表示匹配的内容的符号 都是正则中的元字符
# [0-9]  <---> \d  表示匹配一位任意数字（与[0-9]等同）digit
# [0-9a-zA-Z] ----> \w(表示匹配一位任意数字字母下划线) word
# 空格 -->
# tab --> \t
# enter --> \n
# 空格，tab,enter --> \s  表示所有空格

# \W 非数字字母下划线
# \D 非数字
# \S 非空白

# [\d\D] [\w\W] [\s\S] 表示匹配所有
# . 匹配除了换行符之外的所有（但是可以设置）

# [^\d] 匹配所有的非数字
# [^1] 匹配所有的非1

# ^ 匹配一个字符串的开始
# $ 匹配一个字符串的结尾

# a表达式|b表达式  或  匹配a表达式或者b表达式中的内容，如果a匹配成功了不会和b进行匹配，如果规则有重叠部分长的放在前面
# ()   分组  # 约束|描述的内容的范围问题

# www\.baidu\.com|www\.jd\.com(\转义字符)
# www\.(baidu|jd)\.com

# \b  匹配一个单词的结尾


# 记忆元字符: 都是表示能匹配那些内容，一个元字符总是表示一个字符位置上的内容
# \d \w \s \t \n \D \W \S
# [] [^] .
# ^ $
# | ()

# 量词   必须跟在元字符后面，并且只能约束前面一个元字符
# {n} 表示匹配n次
# {n,} 表示匹配至少n次
# {n, m} 表示至少匹配n次至多m次
# ？ 表示匹配0次或者1次  {0, 1}
# + 表示匹配1次或多次    {1, }
# * 表示匹配0次或多次    {0, }
#   0--？-1---------------------------------+------------------------无穷>（整个数轴*）


# 练习题1：匹配0次：
#       整数：\d+
#       小数: \d+\.\d+
#       整数或者小数: \d+\.?\d*

#       上面整数或者小数不完整（例如25.也符合上述规则）改进如下：
#       分组的作用： \d+(\.\d+)?

# 练习题2：匹配手机号码，要求： 1 3-9 11位
# [1][3-9]\d{9}

# 练习题：判断用户输入的内容是否合法，如果用户输入的对就能查到结果，如果输入的不对就不能查到结果
#   ^[1][3-9]\d{9}$
# 从一个大文件中找到所有符合规则的内容
#   ([1][3-9]\d{9})


# 贪婪匹配
#     在量词范围允许的情况下，尽量多的匹配内容
#   .*x 表示匹配任意字符 任意多次数 遇到最后一个x才停下来
# 非贪婪（惰性）匹配【量词？】（尽可能少的匹配）
#   .*?x 表示匹配任意字符 任意多次数 但是一旦遇到x就停下来


# 转义符（\）
#   原本有特殊意义的字符，到了表达它本身的意义的时候，需要转义  \.  \\n
#   有一些有特殊意义的内容，放在字符组中，会取消他的特殊意义
#         [().*+?]   放在字符组中会取消他的特殊意义
#         [a\-c] -在字符组中表示范围，如果不希望它表示范围，需要转义，或者放在字符组的最前面或最后面

